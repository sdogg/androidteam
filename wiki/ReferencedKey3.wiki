#作业三 参考答案.

= 作业三 参考答案 =

 * Linux的页框管理采用什么算法？简述该算法。
{{{
Linux的页框管理采用buddy算法（伙伴算法）
把所有空闲页框分组为10（Linux2.6.26为11）个块链表，每个块链表分别包含大小为1，2，4，8，16，32，64，128，256和512个连续的页框
每个块的第一个页框的物理地址是该块大小的整数倍
例如：大小为16个页框的块，其起址是16×4KB的倍数
例如：0和1是伙伴，1和2不是伙伴
两个伙伴的大小必须相同，物理地址必须连续
假定伙伴的大小为b
那么第一个伙伴的物理地址必须是2×b×4KB对齐
事实上伙伴是通过对大块的物理内存划分获得的
假如从第0个页面开始到第3个页面结束的内存
每次都对半划分，那么第一次划分获得大小为2页的伙伴
进一步划分，可以获得大小为1页的伙伴，例如0和1，2和3
当两个伙伴都为空闲的时候，就合并成一个更大的块
该过程将一直进行，直到找不到可以合并的伙伴为止
寻找伙伴
给定一个要释放的空闲块
找到其伙伴
查看其状态：合并 or 不合并
假设有128MB的ram。
	128MB最多可以分成215=32768个页框，214=16384个8KB（2页）的块或213=8192个16KB（4页）的块，直至64个大小为512个页的块
假设要请求一个大小为128个页框的块(0.5MB)。
算法先free_area[7]中检查是否有空闲块（块大小为128个页框）
若没有，就到free_area[8]中找一个空闲块（块大小为256个页框）
若存在这样的块，内核就把256个页框分成两等份，一半用作满足请求，另一半插入free_area[7]中
如果在free_area[8]中也没有空闲块，就继续找free_area[9]中是否有空闲块。	
若有，先将512分成伙伴，一个插入free_area[8]中，另一个进一步划分成伙伴，取其一插入free_area[7]中，另一个分配出去
如果free_area[9]也没有空闲块，内存不够，返回一个错误信号

}}}