#内核配置详解(一)

== 内核配置具体步骤 =

 1 将 Linux2. 6.22. 2 内核源码放到工作目录的 kerne l 文件夹下,并解压
     tar xzvf linux2.6.22.2.tar.gz

     cd linux2.6.22.2
    进入内核解压后的目录
 2 修改内核源码根目录下的 Makefile 文 件
     vi Makefile
     修改Makefile,修改ARCH和CROSS_COMPILE 如下
     ARCH    = arm
     CROSS_COMPILE = /home/qinguoli/usr/local/bin/arm-linux-
 3 修改 arch/arm/plat-s3c24xx/common-smdk.c文件,修改 Nand Flash 的分区信息和 Nand Flash 的硬件信息
     {{{
    static struct mtd_partition smdk _default_nand_part[] = {
 [0] = {
  .name = "U-Boot-1.2.0",
  .size  = SZ_128K,
  .offset = 0,
 },
[1] = {
  .name = "U-Boot-1.2.0 Parameter",
  .offset = SZ_128K,
  .size = SZ_64K,
 },
    [2] = {
  .name = "Linux2.6.22.2 Kernel",
  .offset = SZ_128K+SZ_64K,
  .size = SZ_4M+(SZ_1M-SZ_128K-SZ_64K),
 },
    [3] = {
   .name = "Root-JFFS2",
  .offset = SZ_1M * 5,
  .size = SZ_1M * 5,
 },
    [4] = { .name = "Boot-Root(cramf s)",
.offset = SZ_1M * 10,
.size = SZ_1M * 10,
},
   [5] = {
 .name = "YAFFS",
.offset = SZ_1M * 20,
.size = SZ_1M * 44,
}
 /*, [6] = {
 .name = "S3C2410 flash partition 6",
 .offset = SZ_1M * 24,
   .size = SZ_1M * 24,
   },
   [7] = {
  .name = "S3C2410 flash partition 7",
    .offset = SZ_1M * 48,
    .size = SZ_16M,
   }
 */

  ......
static struct s3c2410_platf orm_nand smdk _nand_inf o = {
    .tacls      = 0,
                                       7
.twrph0     = 30,
.twrph1     = 0,
.nr_sets = ARRAY_SIZE(smdk_nand_sets),
.sets    = smdk _nand_sets, };

 };
}}}
 4 修改drivers/mtd/nand/s3c2410.c,去掉nand flash的ECC

  这个内核是通过 U-BOOT 写到 Nand Flash 的, U-BOOT 通过的软件 ECC 算法产生 ECC
校验码, 这与内核校验的 ECC 码不一样 , 内核中的 ECC 码是由 S3C2410 中 Nand Flash 控制
器产生的。所以,在这里选择禁止内核 ECC 校验。
  搜索关键字 NAND_ECC_SOFT,在 s3c2410_nand_init_chip 函数里,修改
NAND_ECC_SOF T 为 NAND_ECC_NONE

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages